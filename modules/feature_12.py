# Feature 12.py implementation here

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

def app():
    st.header("ЁЯТз ржкрж╛ржирж┐ржкрзНрж░ржмрж╛рж╣ рж╕рж┐ржорзБрж▓рзЗрж╢ржи")
    st.markdown("""
    ржиржжрзАрж░ ржкрж╛ржирж┐ржкрзНрж░ржмрж╛рж╣ рж╕рж┐ржорзБрж▓рзЗржЯ ржХрж░рзЗ ржкрж╛ржирж┐рж░ ржЧрждрж┐, ржкрзНрж░ржмрж╛рж╣ рж╣рж╛рж░, ржУ ржЕржирзНржпрж╛ржирзНржп ржлрзНржпрж╛ржХрзНржЯрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣рзЯред
    """)

    # ржЗржЙржЬрж╛рж░ ржЗржиржкрзБржЯ
    flow_rate = st.slider("ржкрж╛ржирж┐рж░ ржкрзНрж░ржмрж╛рж╣ рж╣рж╛рж░ (ржХрж┐ржЙржмрж┐ржХ ржорж┐ржЯрж╛рж░/рж╕рзЗржХрзЗржирзНржб)", 100, 1000, 500)
    channel_width = st.number_input("ржиржжрзАрж░ ржкрзНрж░рж╕рзНрже (ржорж┐ржЯрж╛рж░)", min_value=10, max_value=1000, value=50)
    channel_slope = st.slider("ржиржжрзАрж░ ржврж╛рж▓ (Slope)", 0.0001, 0.01, 0.001, step=0.0001)
    roughness = st.slider("ржиржжрзАрж░ ржкрзГрж╖рзНржарзЗрж░ ржШрж░рзНрж╖ржг (Manning's n)", 0.01, 0.1, 0.03)

    st.markdown("---")

    # Manning's equation ржерзЗржХрзЗ ржкрж╛ржирж┐рж░ ржЧрждрж┐ рж╣рж┐рж╕рж╛ржм (approximate)
    # V = (1/n) * R^(2/3) * S^(1/2)
    # ржпрзЗржЦрж╛ржирзЗ R = рж╣рж╛ржЗржбрзНрж░рзЛрж▓рж┐ржХ рж░рзЗржбрж┐рзЯрж╛рж╕ (A/P), A=ржЕржЮрзНржЪрж▓, P=ржкрзЗрж░рж┐ржорж┐ржЯрж╛рж░
    # рж╕рж░рж▓ ржЬржирзНржп A=width*depth, P=width+2*depth (depth ржЕржирзБржорж╛ржи ржХрж░рж╛ рж╣рзЯ)

    # Depth ржЕржирзБржорж╛ржи
    depth = flow_rate / (channel_width * 1.0)  # assuming velocity = 1 m/s approx for initial guess

    # рж╣рж╛ржЗржбрзНрж░рзЛрж▓рж┐ржХ рж░рзЗржбрж┐рзЯрж╛рж╕ R
    perimeter = channel_width + 2 * depth
    area = channel_width * depth
    R = area / perimeter

    velocity = (1 / roughness) * (R ** (2/3)) * (channel_slope ** 0.5)
    discharge = velocity * area

    st.write(f"ржЕржирзБржорж╛ржи ржХрж░рж╛ ржкрж╛ржирж┐рж░ ржЧржнрзАрж░рждрж╛: **{depth:.2f} ржорж┐ржЯрж╛рж░**")
    st.write(f"рж╣рж╛ржЗржбрзНрж░рзЛрж▓рж┐ржХ рж░рзЗржбрж┐рзЯрж╛рж╕ (R): **{R:.2f} ржорж┐ржЯрж╛рж░**")
    st.write(f"ржкрж╛ржирж┐рж░ ржЧрждрж┐ (Velocity): **{velocity:.2f} ржорж┐ржЯрж╛рж░/рж╕рзЗржХрзЗржирзНржб**")
    st.write(f"рж╕рж░рзНржмржорзЛржЯ ржкрж╛ржирж┐рж░ ржкрзНрж░ржмрж╛рж╣ (Discharge): **{discharge:.2f} ржХрж┐ржЙржмрж┐ржХ ржорж┐ржЯрж╛рж░/рж╕рзЗржХрзЗржирзНржб**")

    # ржкрж╛ржирж┐рж░ ржЧрждрж┐ ржЧрзНрж░рж╛ржл
    x = np.linspace(0, 100, 500)  # ржиржжрзАрж░ ржжрзИрж░рзНржШрзНржп ржзрж░рзЗ 0-100 ржорж┐ржЯрж╛рж░
    y = velocity * np.exp(-0.01 * x)  # рж╕рж┐ржорзБрж▓рзЗрж╢ржи: ржЧрждрж┐ рж╣рзНрж░рж╛рж╕ ржкрж╛рзЯ ржжрзВрж░рждрзНржмрзЗрж░ рж╕рж╛ржерзЗ

    fig, ax = plt.subplots()
    ax.plot(x, y, label="Velocity along river (m/s)")
    ax.set_xlabel("ржиржжрзАрж░ ржжрзИрж░рзНржШрзНржп (ржорж┐ржЯрж╛рж░)")
    ax.set_ylabel("ржкрж╛ржирж┐рж░ ржЧрждрж┐ (ржорж┐ржЯрж╛рж░/рж╕рзЗржХрзЗржирзНржб)")
    ax.set_title("ржкрж╛ржирж┐ржкрзНрж░ржмрж╛рж╣ рж╕рж┐ржорзБрж▓рзЗрж╢ржи")
    ax.legend()
    st.pyplot(fig)

